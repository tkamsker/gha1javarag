---
description: 
globs: 
alwaysApply: false
---
---
description: Implement web chat interface for ChromaDB access using main.py and step2.py structure

globs:
  - main.py
  - step2.py

type: Auto Attached

---

# Rule: Web Chat Interface for ChromaDB

## Objective

Build a web-based ChatGPT-like interface allowing users to query ChromaDB using the data structure and logic from `main.py` and `step2.py`.

## Instructions

1. **Understand the ChromaDB Integration**
   - Review `main.py` and `step2.py` to identify how ChromaDB is initialized, how data is stored, and how vector queries are performed.
   - Note the required environment variables, database paths, and any special configuration.

2. **Design the Web Interface**
   - Use a lightweight web framework (e.g., FastAPI or Flask) for the server.
   - Expose an API endpoint `/chat` that accepts user queries as POST requests.
   - The endpoint should:
     - Accept a JSON payload with a `message` field.
     - Use the logic from `main.py` and `step2.py` to query ChromaDB for relevant context.
     - Return a JSON response with the relevant code/documentation and a generated answer.

3. **Integrate LLM for Answer Generation**
   - Use an LLM (OpenAI, local model, or similar) to generate answers based on the retrieved ChromaDB context.
   - The response should be conversational and helpful for planning or code rewrite tasks.

4. **Reference Code Structure**
   - All ChromaDB initialization, query logic, and data structure should be based on the code in `main.py` and `step2.py`.
   - Keep the web interface minimal and focused on the existing functionality.

5. **Example API Payload and Response**

   **Request:**
{
"message": "How is the Java codebase currently structured?"
}


**Response:**
{
"answer": "The Java codebase is stored in ChromaDB as vector embeddings. Each file is indexed with metadata including file name and class/method information. You can query for specific classes or methods as needed.",
"context": ["main.py: ChromaDB initialization logic", "step2.py: Query and metadata handling"]
}


6. **Deployment Notes**
- Ensure all dependencies from `main.py` and `step2.py` are included in the web project.
- Test the `/chat` endpoint with various queries to confirm correct ChromaDB access and LLM integration.

