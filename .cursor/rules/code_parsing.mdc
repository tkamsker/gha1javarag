# Code Parsing Rules

## File Type Support
- Java: .java files - extract classes, methods, imports, annotations, comments
- JSP: .jsp files - extract forms, endpoints, DOM structures, scripts
- XML: .xml files - extract table definitions, mappings, configurations
- HTML/JS: .html, .js files - extract UI elements, handlers, forms
- GWT: .ui.xml, .gwt.xml files - extract widget hierarchy, @UiField, @UiHandler
- SQL: .sql files - extract table/view definitions, queries, constraints
- Properties: .properties files - extract configuration values

## Parsing Approach
- Use lightweight static parsing (regex/AST-lite)
- Avoid requiring full language servers
- Enrich with LLM where configured via AI_PROVIDER
- Extract both structural and semantic information
- Preserve code context and relationships

## Metadata Extraction
- General: file_path, project_name, language, size_bytes, sha256, last_modified
- Code: classes/interfaces, methods, imports, package, annotations, comments
- Business: validation rules, feature flags, roles/permissions, domain entities
- Complexity: LoC, cyclomatic estimate, nesting heuristics
- Cross-links: called methods, referenced tables, REST endpoints, navigation targets

## Error Handling
- Continue processing on file-level errors
- Log warnings for files exceeding MAX_FILE_BYTES
- Use safe text decoding with UTF-8 fallback
- Record failed files with reason in processing logs